{"pageProps":{"id":"4","title":"服务端渲染组件 & 客户端渲染组件","prev":{"id":3,"title":"CSR VS SSR"},"next":{"id":5,"title":"路由"},"md":{"data":"# 服务端渲染组件\r\n\r\n使用```renderToString```方法将一个React组件元素转换成字符串,然后内嵌到返回的```html```字符串中\r\n\r\n```js\r\nimport { renderToString } from 'react-dom/server'\r\n\r\n// ...\r\nconst content = renderToString(<App />);\r\n```\r\n\r\n## 本节课内容\r\n\r\n1. 服务器书写`react`组件\r\n2. 使用`webpack`打包**服务器代码**到`dist`目录\r\n3. 利用`@babel/preset-react`解析`react`代码\r\n4. 利用`externals`配置和`webpack-node-externals`排除掉`node_modules`目录\r\n5. 重新配置`package.json`\r\n6. 渲染页面组件的内容到`div`中\r\n\r\n\r\n# 客户端渲染组件\r\n\r\n**同构**：保持服务器和客户端渲染一致\r\n\r\n书写客户端启动文件\r\n使用webpack打包客户端代码到public目录\r\n在服务器输出的html代码中引入js\r\n重新配置package.json\r\n\r\n\r\n必须保证客户端和服务端的**元素结构 样式名称**完全一致,否则将渲染失败\r\n\r\n服务端和客户端的webpack的打包配置也不一样\r\n* 服务端:\r\n    - 服务端不需要打包样式文件,但是需要保证与打包后的客户端的样式名称一致\r\n    - 使用```isomorphic-style-loader```转化```css-loader```处理后的代码,**仅需要哈希**\r\n    - **服务端可以直接依赖```node_modules```下的第三方库,因此,为了提高打包构建速度,加上```externals: [nodeExternals()]```配置**\r\n\r\n* 客户端:\r\n    - **需要依赖```node_modules```**,因此,webpack配置中要去掉```externals```\r\n    - 需要与服务端完全一致的元素结合 样式名称\r\n    - 将所有的文件打包成一个```js```文件,内嵌到服务端返回的页面资源中\r\n\r\n```js\r\nimport fs from 'fs'\r\n\r\nexport default function () {\r\n  const files = fs.readdirSync('./public/js')\r\n    .filter(file => file.endsWith('.js'))\r\n    .map(file => `<script src=\"./js/${file}\"></script>`)\r\n\r\n  return files.join('\\n')\r\n}\r\n```"}},"__N_SSG":true}