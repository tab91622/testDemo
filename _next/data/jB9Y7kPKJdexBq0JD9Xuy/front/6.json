{"pageProps":{"id":"6","title":"React 生命周期","prev":{"id":5,"title":"路由"},"next":{"id":7,"title":"深入了解 setState"},"md":{"data":"## 生命周期\r\n\r\n生命周期：组件从诞生到销毁会经历一系列的过程，该过程就叫做生命周期。React在组件的生命周期中提供了一系列钩子函数（类似于事件），可以让开发者在函数中注入代码，这些代码会在合适的时候运行\r\n\r\n***生命周期仅存在于类组件中，函数组件每次调用都是重新运行函数，旧的组件即刻被销毁***\r\n\r\n### 旧版生命周期 React < 16.0.0\r\n\r\nconstructor：\r\n   * 同一个组件只会创建一次\r\n   * 不能在第一次挂载到页面之前调用setState，为了避免问题，构造函数中禁止使用setState\r\n\r\ncomponentWillMount(**新版已删除**)\r\n   * 正常情况下，和构造函数一样，它只会运行一次\r\n   * 可以正常使用setState，但是为了避免bug，不允许使用，因为在某些情况下，该函数会被调用多次\r\n\r\n**render**\r\n   * 返回一个虚拟DOM，会被挂在到虚拟DOM树中，最终渲染到页面的真实DOM中\r\n   * render可能不止运行一次，只要出发页面重新渲染，就会重新运行\r\n   * 严禁使用setState，因为可能导致无限递归渲染\r\n\r\n**componentDidMount**\r\n   * 创建组件**只会执行一次**\r\n   * 可以使用setState，通常情况下，会将网络请求、启动定时器等一开始需要的操作，书写到该函数中\r\n\r\n--------组件进入活跃状态---------\r\n\r\ncomponentWillReceiveProps(**新版已删除**)\r\n   * 属性或状态**重新被赋值**，不一定是改变，就算赋值与之前一样，也会触发\r\n   * 即将接受新的属性值\r\n   * 参数为新的属性对象\r\n   * 该函数可能会导致一些bug，所以不推荐使用\r\n\r\n**shouldComponentUpdate**\r\n   * 指示React是否要重新渲染该组件，通过返回true或false来指定（**如果在组件中使用了该函数，那么一定要有返回值：true或者false**）\r\n   * 默认情况下，会直接返回true\r\n   * 可以加一个判断，前后数据是否一样，如果相同，就直接返回false\r\n   \r\ncomponentWillUpdate(**新版已删除**)\r\n   * 组件即将被重新渲染，在render之前执行\r\n\r\ncomponentDidUpdate\r\n   * 往往在该函数中使用dom操作，改变元素\r\n\r\n**componentWillUnmount**\r\n   * 通常在该函数中销毁一些组件依赖的资源，如定时器\r\n\r\n\r\n### 新版生命周期\r\nReact官方认为，某个数据的来源必须单一\r\n\r\ngetDerivedStateFromProps\r\n   * 通过参数可以获取新的属性和状态\r\n   * 该函数时静态的\r\n   * 该函数的返回值会覆盖掉组件状态\r\n   * 该函数几乎没有什么用\r\n\r\ngetSnapshotBeforeUpdate\r\n   * 真实的DOM构建完成，但还未实际渲染到页面中\r\n   * 在该函数中，通常用于实现一些附加的dom操作\r\n   * 该函数的返回值，会作为componentDidUpdate的第三个参数"}},"__N_SSG":true}