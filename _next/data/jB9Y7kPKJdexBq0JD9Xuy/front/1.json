{"pageProps":{"id":"1","title":"getServerSideProps方法","prev":null,"next":{"id":2,"title":"服务端仓库共享问题"},"md":{"data":"# getServerSideProps\r\n页面中```export```一个```async```的getServerSideProps方法，next就会**在每次请求时候在服务端调用这个方法。**\r\n\r\n**方法只会在服务端运行，每次请求都运行一边getServerSideProps方法**\r\n\r\n\r\n如果页面通过浏览器端Link组件导航而来，Next会向服务端发一个请求，然后在服务端运行getServerSideProps方法，然后返回JSON到浏览器。\r\n\r\n\r\n> getServerSideProps方法主要是**升级**了9.3之前的```getInitialProps```方法\r\n\r\n9.3之前的getInitialProps方法有一个很大的缺陷是在**浏览器中req和res对象会是undefined**。也就是使用它的页面，如果是浏览器渲染你需要在组件内再显示地请求一次。开发体验不太好。 如果没有特殊问题，建议使用getServerSideProps替代getInitialProps方法。\r\n\r\n\r\n# getStaticProps\r\n使用getStaticProps方法**在build阶段返回页面所需的数据**。\r\n\r\n如果是动态路由的页面，使用getStaticPaths方法来返回所有的路由参数，以及是否需要回落机制。\r\n\r\n\r\n# getStaticPaths\r\n处理动态路由,\r\n1. 该函数返回```{paths, fallback}```\r\n2. 服务端构建 渲染的时候,会根据```paths```(一般是一个数组)的内容执行```getStaticProps```并传递相关参数\r\n3. 从而根据数据构建静态页面\r\n\r\n## fallback\r\nfalse : 没什么用\r\n\r\ntrue : 会多执行一次```getStaticProps```,生成```[id].html```\r\n- 当一开始没有在之前的静态页面(根据动态路由生成的)找到目标路由时,会先返回```[id].html```\r\n- 然后服务端马上执行一次```getStaticProps```,根据新的```id```在渲染一次该组件,返回html\r\n"}},"__N_SSG":true}